// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5999.powerup;

import org.usfirst.frc5999.powerup.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc5999.powerup.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton trigger;
    public JoystickButton button_thumb;
    
    // triggers for TURBO ///////////////////////////////////
    public JoystickButton trigger1, trigger2;
    ///////////////////// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ end
    
    public Joystick joystickLeft;
    public Joystick joystickRight;
    
   
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystickRight = new Joystick(0);
        
        joystickLeft = new Joystick(1);
        
        button_thumb = new JoystickButton(joystickLeft, 1);
        button_thumb.whileHeld(new CubeOut());
        trigger = new JoystickButton(joystickLeft, 1);
        trigger.whileHeld(new CubeIn());
        
        
        ////////////////////Start
        /////////////////////////////// Turbo (First buttons self made) (Help by Tim) \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        trigger1 = new JoystickButton(joystickLeft, 0);
        trigger2 = new JoystickButton(joystickRight, 0);
        
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////// End

        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Deliver Vault", new DeliverVault());
        SmartDashboard.putData("Cube In", new CubeIn());
        SmartDashboard.putData("Move Elevator: intake", new MoveElevator(0));
        SmartDashboard.putData("Move Elevator: vault", new MoveElevator(1));
        SmartDashboard.putData("Move Elevator: low_switch", new MoveElevator(2));
        SmartDashboard.putData("Move Elevator: high_switch", new MoveElevator(3));
        SmartDashboard.putData("Move Elevator: low_scale", new MoveElevator(4));
        SmartDashboard.putData("Move Elevator: high_scale", new MoveElevator(5));
        SmartDashboard.putData("Move Elevator: lift_point", new MoveElevator(6));
        SmartDashboard.putData("Cube Out", new CubeOut());
        SmartDashboard.putData("Move Elevator Pot: intake", new MoveElevatorPot(0));
        SmartDashboard.putData("Move Elevator Pot: vault", new MoveElevatorPot(0.1));
        SmartDashboard.putData("Move Elevator Pot: low_switch", new MoveElevatorPot(0.3));
        SmartDashboard.putData("Move Elevator Pot: high_switch", new MoveElevatorPot(0.4));
        SmartDashboard.putData("Move Elevator Pot: low_scale", new MoveElevatorPot(0.6));
        SmartDashboard.putData("Move Elevator Pot: high_scale", new MoveElevatorPot(0.8));
        SmartDashboard.putData("Move Elevator Pot: lift_point", new MoveElevatorPot(1));
        SmartDashboard.putData("Gather Cube", new GatherCube());
        SmartDashboard.putData("DriveRobot", new DriveRobot());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystickLeft() {
        return joystickLeft;
    }

    public Joystick getJoystickRight() {
        return joystickRight;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

